---
title: "Case Study: Modelling approaches for meta-analyses with dependent effect sizes in ecology and evolution"
author: "Coralie Williams"
date: "Last compiled on `r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    page-layout: full
    toc: true
    toc-location: left
    toc-depth: 2
    theme: materia
    embed-resources: true
    code-fold: true
    code-tools: true
    number-sections: false
editor_options: 
  chunk_output_type: console
---

This page provide features case studies to demonstrate different modelling approaches for meta-analyses with dependent effect sizes in ecology and evolution. 


# Assortative mating 

Rios Moura, R., Oliveira Gonzaga, M., Silva Pinto, N., Vasconcellos-Neto, J., & Requena, G. S. (2021). Assortative mating in space and time: Patterns and biases. Ecology Letters, 24(5), 1089â€“1102. https://doi.org/10.1111/ele.13690



```{r}
#| echo: false
rm(list = ls())

library(pacman)
p_load(readxl, tidyverse, metafor, ape, ggplot2, ggpubr, dplyr, broom,
       knitr, kableExtra, here, cowplot, ggdist, gridExtra, clubSandwich)
```


# Case study

```{r}
#| echo: false

# link to obtain data file
## "https://zenodo.org/records/4390539/files/Supplementary_Information_S7_-_Dataset.xlsx?download=1"

# load data
dat <- as.data.frame(read_excel("data/dat.xlsx", skip = 2))
colnames(dat) <- tolower(gsub(" ", "_", colnames(dat)))
colnames(dat)

# load the phylogenetic tree
tre <- read.tree("https://zenodo.org/record/4390539/files/Supplementary%20Information%20S8%20-%20Phylogenetic%20tree.tre?download=1")
# plot(tre)

# excluding the species from the phylogeny tree that are not available in the data
tre_sub <- drop.tip(tre, which(!tre$tip.label %in% dat$species_id))

# converting the non-ultrametric tree to ultrametric tree 
tre_sub <- compute.brlen(tre_sub, power = 1)

# computing the variance-covariance matrix from the phylogeny tree
A <- vcv(tre_sub)

# creating a variable to distinguish the phylogenetic component from the non-phlylogenetic component
dat$phylo <- dat$species_id

# filter by no pooling and 
dat <- dat[which(dat$`pooled_data?`=="no"),]


# get pairwise correlations of sampling errors per study
comb <- combn(dat$vz, 2, simplify = TRUE)

var_corr <- dat |> 
  filter(!study_id==unique(study_id)) |> 
  group_by(study_id) |> 
  summarise(cor(comb[1, ], comb[2, ], method = "pearson")) |> 
  ungroup()
 
var_corr <- dat %>%
  group_by(study_id) %>%
  filter(n() > 2) %>%  # Include only studies with more than 2 values of Vz
  summarise(
    correlation = cor(vz, method = "pearson")  # Compute Pearson correlation of Vz
  ) %>%
  ungroup()


within_corr <- dat |> 
  group_by(study_id) |> 
  filter(n() > 1) |> 
  summarise(within_corr = cor(vz, vz, method = "pearson"))



# overall correlation across studies
overall_corr <- var_corr %>%
  summarise(mean_corr = mean(correlation, na.rm = TRUE),
            median_corr = median(correlation, na.rm = TRUE))



####
####
# model 3 - multilevel model 
V <- vcalc(vz, cluster=study_id, obs=effect_size_id, rho=0.2, data=dat)
mod3 <- rma.mv(zr, V, 
               random = list(~ 1 | study_id, ~ 1 |  effect_size_id),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)

vcov_matrix <- vcov(mod3, type = "obs")
cor_matrix <- cov2cor(vcov_matrix)

# set up
study_ids <- dat$study_id
effect_size_ids <- dat$effect_size_id

##### get cor matrices per study
study_correlations2 <- unique(study_ids) |>
  lapply(function(study) {
    # subset the VCV matrix for the given study
    indices <- which(study_ids == study)
    sub_matrix <- vcov_matrix[indices, indices]
    
    # get correlations from the VCV matrix
    variances <- diag(sub_matrix)
    correlations <- outer(variances, variances, function(x, y) sub_matrix / sqrt(x * y))
    list(study = study, correlations = correlations)
  })


```


```{r}
#### Fit the models

# model 1 - simple fixed effect
mod1 <- rma.mv(zr, vz, 
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod1_cr0 <- robust(mod1, cluster = study_id, adjust=FALSE)
mod1_cr1 <- robust(mod1, cluster = study_id, adjust=TRUE)
mod1_cr2 <- robust(mod1, cluster = study_id, clubSandwich=TRUE)
mod1_cr2_sd <- coef_test(mod1, vcov="CR2", cluster= dat$study_id)



# model 2 - random effect
mod2 <- rma.mv(zr, vz, 
               random = list(~ 1 |  effect_size_id),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod2_cr0 <- robust(mod2, cluster = study_id, adjust=FALSE)
mod2_cr1 <- robust(mod2, cluster = study_id, adjust=TRUE)
mod2_cr2 <- robust(mod2, cluster = study_id, clubSandwich=TRUE)
mod2_cr2_sd <- coef_test(mod2, vcov="CR2", cluster= dat$study_id)



# model 3 - multilevel model 
mod3 <- rma.mv(zr, vz, 
               random = list(~ 1 | study_id, ~ 1 |  effect_size_id),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod3_cr0 <- robust(mod3, cluster = study_id, adjust=FALSE)
mod3_cr1 <- robust(mod3, cluster = study_id, adjust=TRUE)
mod3_cr2 <- robust(mod3, cluster = study_id, clubSandwich=TRUE)
mod3_cr2_sd <- coef_test(mod3, vcov="CR2", cluster= dat$study_id)



# model 4 - phylogenetic multilevel model
mod4 <- rma.mv(zr, vz, 
               random = list(~ 1 | study_id,
                             ~ 1 |  effect_size_id,
                             ~ 1 | species_id,
                             ~ 1 | phylo),
               R = list(phylo = A),              
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod4_cr0 <- robust(mod4, cluster = study_id, adjust=FALSE)
mod4_cr1 <- robust(mod4, cluster = study_id, adjust=TRUE)





# model 5 - phylogenetic multilevel model + VCV (rho=0.2)
V <- vcalc(vz, cluster=study_id, obs=effect_size_id, rho=0.2, data=dat)
mod5 <- rma.mv(zr, 
               V=V, 
               random = list(~ 1 | study_id,
                             ~ 1 |  effect_size_id,
                             ~ 1 | species_id,
                             ~ 1 | phylo),
               R = list(phylo = A),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod5_cr0 <- robust(mod5, cluster = study_id, adjust=FALSE)
mod5_cr1 <- robust(mod5, cluster = study_id, adjust=TRUE)



# model 6 - phylogenetic multilevel model + VCV (rho=0.5)
V <- vcalc(vz, cluster=study_id, obs=effect_size_id, rho=0.5, data=dat)
mod6 <- rma.mv(zr, 
               V=V, 
               random = list(~ 1 | study_id,
                             ~ 1 |  effect_size_id, 
                             ~ 1 | species_id,
                             ~ 1 | phylo),
               R = list(phylo = A),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod6_cr0 <- robust(mod6, cluster = study_id, adjust=FALSE)
mod6_cr1 <- robust(mod6, cluster = study_id, adjust=TRUE)



# model 7 - phylogenetic multilevel model + VCV (rho=0.8)
V <- vcalc(vz, cluster=study_id, obs=effect_size_id, rho=0.8, data=dat) #cov2cor(V[1:4,1:4])
mod7 <- rma.mv(zr, 
               V=V, 
               random = list(~ 1 | study_id,
                             ~ 1 | effect_size_id,
                             ~ 1 | species_id,
                             ~ 1 | phylo),
               R = list(phylo = A),
               test = "t",
               #dfs = k.studies - 1,
               data = dat, 
               sparse = TRUE)
mod7_cr0 <- robust(mod7, cluster = study_id, adjust=FALSE)
mod7_cr1 <- robust(mod7, cluster = study_id, adjust=TRUE)





#dat <- dat[order(dat$study_id, dat$effect_size_id), ] 
#dat$effect_size_within_study_id <- ave(dat$effect_size_id, dat$study_id, FUN = seq_along)


#### Model fits
summary(mod1)
summary(mod1_cr0)
summary(mod1_cr1)
summary(mod1_cr2)
mod1_cr2_sd

summary(mod2)
summary(mod2_cr0)
summary(mod2_cr1)
summary(mod2_cr2)
mod2_cr2_sd

summary(mod3)
summary(mod3_cr0)
summary(mod3_cr1)
summary(mod3_cr2)
mod3_cr2_sd

summary(mod4)
summary(mod4_cr0)
summary(mod4_cr1)

summary(mod5)
summary(mod5_cr0)
summary(mod5_cr1)

summary(mod6)
summary(mod6_cr0)
summary(mod6_cr1)

summary(mod7)
summary(mod7_cr0)
summary(mod7_cr1)


```






```{r}

# creating a matrix to store the results
res <- matrix(NA, nrow = 11, ncol = 28)
colnames(res) <- paste0("mod", c("1", "1_cr0", "1_cr1", "1_cr2",
                                 "2", "2_cr0", "2_cr1", "2_cr2",
                                 "3", "3_cr0", "3_cr1", "3_cr2",
                                 "4", "4_cr0", "4_cr1", "4_cr2",
                                 "5", "5_cr0", "5_cr1", "5_cr2",
                                 "6", "6_cr0", "6_cr1", "6_cr2",
                                 "7", "7_cr0", "7_cr1", "7_cr2"))
rownames(res) <- c("s2.u", "s2.s", "s2.n", "s2.p",
                   "est", "se", "zval", "pval",
                   "ci.lb", "ci.ub", "AIC")

# storing the results

### model 1
res["est",   "mod1"] <- mod1$beta
res["se",    "mod1"] <- mod1$se
res["zval",  "mod1"] <- mod1$zval
res["pval",  "mod1"] <- mod1$pval
res["ci.lb", "mod1"] <- mod1$ci.lb
res["ci.ub", "mod1"] <- mod1$ci.ub
res["AIC",   "mod1"] <- AIC(mod1)

res["est",   "mod1_cr0"] <- mod1_cr0$beta
res["se",    "mod1_cr0"] <- mod1_cr0$se
res["zval",  "mod1_cr0"] <- mod1_cr0$zval
res["pval",  "mod1_cr0"] <- mod1_cr0$pval
res["ci.lb", "mod1_cr0"] <- mod1_cr0$ci.lb
res["ci.ub", "mod1_cr0"] <- mod1_cr0$ci.ub
res["AIC",   "mod1_cr0"] <- AIC(mod1_cr0)

res["est",   "mod1_cr1"] <- mod1_cr1$beta
res["se",    "mod1_cr1"] <- mod1_cr1$se
res["zval",  "mod1_cr1"] <- mod1_cr1$zval
res["pval",  "mod1_cr1"] <- mod1_cr1$pval
res["ci.lb", "mod1_cr1"] <- mod1_cr1$ci.lb
res["ci.ub", "mod1_cr1"] <- mod1_cr1$ci.ub
res["AIC",   "mod1_cr1"] <- AIC(mod1_cr1)

res["est",   "mod1_cr2"] <- mod1_cr2$beta
res["se",    "mod1_cr2"] <- mod1_cr2$se
res["zval",  "mod1_cr2"] <- mod1_cr2$zval
res["pval",  "mod1_cr2"] <- mod1_cr2$pval
res["ci.lb", "mod1_cr2"] <- mod1_cr2$ci.lb
res["ci.ub", "mod1_cr2"] <- mod1_cr2$ci.ub
res["AIC",   "mod1_cr2"] <- AIC(mod1_cr2)


### model 2
res["s2.u",  "mod2"] <- mod2$sigma2
res["est",   "mod2"] <- mod2$beta
res["se",    "mod2"] <- mod2$se
res["zval",  "mod2"] <- mod2$zval
res["pval",  "mod2"] <- mod2$pval
res["ci.lb", "mod2"] <- mod2$ci.lb
res["ci.ub", "mod2"] <- mod2$ci.ub
res["AIC",   "mod2"] <- AIC(mod2)

res["s2.u",  "mod2_cr0"] <- mod2_cr0$sigma2
res["est",   "mod2_cr0"] <- mod2_cr0$beta
res["se",    "mod2_cr0"] <- mod2_cr0$se
res["zval",  "mod2_cr0"] <- mod2_cr0$zval
res["pval",  "mod2_cr0"] <- mod2_cr0$pval
res["ci.lb", "mod2_cr0"] <- mod2_cr0$ci.lb
res["ci.ub", "mod2_cr0"] <- mod2_cr0$ci.ub
res["AIC",   "mod2_cr0"] <- AIC(mod2_cr0)

res["s2.u",  "mod2_cr1"] <- mod2_cr1$sigma2
res["est",   "mod2_cr1"] <- mod2_cr1$beta
res["se",    "mod2_cr1"] <- mod2_cr1$se
res["zval",  "mod2_cr1"] <- mod2_cr1$zval
res["pval",  "mod2_cr1"] <- mod2_cr1$pval
res["ci.lb", "mod2_cr1"] <- mod2_cr1$ci.lb
res["ci.ub", "mod2_cr1"] <- mod2_cr1$ci.ub
res["AIC",   "mod2_cr1"] <- AIC(mod2_cr1)

res["s2.u",  "mod2_cr2"] <- mod2_cr2$sigma2
res["est",   "mod2_cr2"] <- mod2_cr2$beta
res["se",    "mod2_cr2"] <- mod2_cr2$se
res["zval",  "mod2_cr2"] <- mod2_cr2$zval
res["pval",  "mod2_cr2"] <- mod2_cr2$pval
res["ci.lb", "mod2_cr2"] <- mod2_cr2$ci.lb
res["ci.ub", "mod2_cr2"] <- mod2_cr2$ci.ub
res["AIC",   "mod2_cr2"] <- AIC(mod2_cr2)


### model 3
res["s2.u",  "mod3"] <- mod3$sigma2[2]
res["s2.s",  "mod3"] <- mod3$sigma2[1]
res["est",   "mod3"] <- mod3$beta
res["se",    "mod3"] <- mod3$se
res["zval",  "mod3"] <- mod3$zval
res["pval",  "mod3"] <- mod3$pval
res["ci.lb", "mod3"] <- mod3$ci.lb
res["ci.ub", "mod3"] <- mod3$ci.ub
res["AIC",   "mod3"] <- AIC(mod3)

res["s2.u",  "mod3_cr0"] <- mod3_cr0$sigma2[2]
res["s2.s",  "mod3_cr0"] <- mod3_cr0$sigma2[1]
res["est",   "mod3_cr0"] <- mod3_cr0$beta
res["se",    "mod3_cr0"] <- mod3_cr0$se
res["zval",  "mod3_cr0"] <- mod3_cr0$zval
res["pval",  "mod3_cr0"] <- mod3_cr0$pval
res["ci.lb", "mod3_cr0"] <- mod3_cr0$ci.lb
res["ci.ub", "mod3_cr0"] <- mod3_cr0$ci.ub
res["AIC",   "mod3_cr0"] <- AIC(mod3_cr0)

res["s2.u",  "mod3_cr1"] <- mod3_cr1$sigma2[2]
res["s2.s",  "mod3_cr1"] <- mod3_cr1$sigma2[1]
res["est",   "mod3_cr1"] <- mod3_cr1$beta
res["se",    "mod3_cr1"] <- mod3_cr1$se
res["zval",  "mod3_cr1"] <- mod3_cr1$zval
res["pval",  "mod3_cr1"] <- mod3_cr1$pval
res["ci.lb", "mod3_cr1"] <- mod3_cr1$ci.lb
res["ci.ub", "mod3_cr1"] <- mod3_cr1$ci.ub
res["AIC",   "mod3_cr1"] <- AIC(mod3_cr1)

res["s2.u",  "mod3_cr2"] <- mod3_cr2$sigma2[2]
res["s2.s",  "mod3_cr2"] <- mod3_cr2$sigma2[1]
res["est",   "mod3_cr2"] <- mod3_cr2$beta
res["se",    "mod3_cr2"] <- mod3_cr2$se
res["zval",  "mod3_cr2"] <- mod3_cr2$zval
res["pval",  "mod3_cr2"] <- mod3_cr2$pval
res["ci.lb", "mod3_cr2"] <- mod3_cr2$ci.lb
res["ci.ub", "mod3_cr2"] <- mod3_cr2$ci.ub
res["AIC",   "mod3_cr2"] <- AIC(mod3_cr2)


#### model 4
res["s2.u",  "mod4"] <- mod4$sigma2[2]
res["s2.s",  "mod4"] <- mod4$sigma2[1]
res["s2.n",  "mod4"] <- mod4$sigma2[3]
res["s2.p",  "mod4"] <- mod4$sigma2[4]
res["est",   "mod4"] <- mod4$beta
res["se",    "mod4"] <- mod4$se
res["zval",  "mod4"] <- mod4$zval
res["pval",  "mod4"] <- mod4$pval
res["ci.lb", "mod4"] <- mod4$ci.lb
res["ci.ub", "mod4"] <- mod4$ci.ub
res["AIC",   "mod4"] <- AIC(mod4)

res["s2.u",  "mod4_cr0"] <- mod4_cr0$sigma2[2]
res["s2.s",  "mod4_cr0"] <- mod4_cr0$sigma2[1]
res["s2.n",  "mod4_cr0"] <- mod4_cr0$sigma2[3]
res["s2.p",  "mod4_cr0"] <- mod4_cr0$sigma2[4]
res["est",   "mod4_cr0"] <- mod4_cr0$beta
res["se",    "mod4_cr0"] <- mod4_cr0$se
res["zval",  "mod4_cr0"] <- mod4_cr0$zval
res["pval",  "mod4_cr0"] <- mod4_cr0$pval
res["ci.lb", "mod4_cr0"] <- mod4_cr0$ci.lb
res["ci.ub", "mod4_cr0"] <- mod4_cr0$ci.ub
res["AIC",   "mod4_cr0"] <- AIC(mod4_cr0)

res["s2.u",  "mod4_cr1"] <- mod4_cr1$sigma2[2]
res["s2.s",  "mod4_cr1"] <- mod4_cr1$sigma2[1]
res["s2.n",  "mod4_cr1"] <- mod4_cr1$sigma2[3]
res["s2.p",  "mod4_cr1"] <- mod4_cr1$sigma2[4]
res["est",   "mod4_cr1"] <- mod4_cr1$beta
res["se",    "mod4_cr1"] <- mod4_cr1$se
res["zval",  "mod4_cr1"] <- mod4_cr1$zval
res["pval",  "mod4_cr1"] <- mod4_cr1$pval
res["ci.lb", "mod4_cr1"] <- mod4_cr1$ci.lb
res["ci.ub", "mod4_cr1"] <- mod4_cr1$ci.ub
res["AIC",   "mod4_cr1"] <- AIC(mod4_cr1)




#### model 5
res["s2.u",  "mod5"] <- mod5$sigma2[2]
res["s2.s",  "mod5"] <- mod5$sigma2[1]
res["s2.n",  "mod5"] <- mod5$sigma2[3]
res["s2.p",  "mod5"] <- mod5$sigma2[4]
res["est",   "mod5"] <- mod5$beta
res["se",    "mod5"] <- mod5$se
res["zval",  "mod5"] <- mod5$zval
res["pval",  "mod5"] <- mod5$pval
res["ci.lb", "mod5"] <- mod5$ci.lb
res["ci.ub", "mod5"] <- mod5$ci.ub
res["AIC",   "mod5"] <- AIC(mod5)

res["s2.u",  "mod5_cr0"] <- mod5_cr0$sigma2[2]
res["s2.s",  "mod5_cr0"] <- mod5_cr0$sigma2[1]
res["s2.n",  "mod5_cr0"] <- mod5_cr0$sigma2[3]
res["s2.p",  "mod5_cr0"] <- mod5_cr0$sigma2[4]
res["est",   "mod5_cr0"] <- mod5_cr0$beta
res["se",    "mod5_cr0"] <- mod5_cr0$se
res["zval",  "mod5_cr0"] <- mod5_cr0$zval
res["pval",  "mod5_cr0"] <- mod5_cr0$pval
res["ci.lb", "mod5_cr0"] <- mod5_cr0$ci.lb
res["ci.ub", "mod5_cr0"] <- mod5_cr0$ci.ub
res["AIC",   "mod5_cr0"] <- AIC(mod5_cr0)

res["s2.u",  "mod5_cr1"] <- mod5_cr1$sigma2[2]
res["s2.s",  "mod5_cr1"] <- mod5_cr1$sigma2[1]
res["s2.n",  "mod5_cr1"] <- mod5_cr1$sigma2[3]
res["s2.p",  "mod5_cr1"] <- mod5_cr1$sigma2[4]
res["est",   "mod5_cr1"] <- mod5_cr1$beta
res["se",    "mod5_cr1"] <- mod5_cr1$se
res["zval",  "mod5_cr1"] <- mod5_cr1$zval
res["pval",  "mod5_cr1"] <- mod5_cr1$pval
res["ci.lb", "mod5_cr1"] <- mod5_cr1$ci.lb
res["ci.ub", "mod5_cr1"] <- mod5_cr1$ci.ub
res["AIC",   "mod5_cr1"] <- AIC(mod5_cr1)



#### model 6
res["s2.u",  "mod6"] <- mod6$sigma2[2]
res["s2.s",  "mod6"] <- mod6$sigma2[1]
res["s2.n",  "mod6"] <- mod6$sigma2[3]
res["s2.p",  "mod6"] <- mod6$sigma2[4]
res["est",   "mod6"] <- mod6$beta
res["se",    "mod6"] <- mod6$se
res["zval",  "mod6"] <- mod6$zval
res["pval",  "mod6"] <- mod6$pval
res["ci.lb", "mod6"] <- mod6$ci.lb
res["ci.ub", "mod6"] <- mod6$ci.ub
res["AIC",   "mod6"] <- AIC(mod6)

res["s2.u",  "mod6_cr0"] <- mod6_cr0$sigma2[2]
res["s2.s",  "mod6_cr0"] <- mod6_cr0$sigma2[1]
res["s2.n",  "mod6_cr0"] <- mod6_cr0$sigma2[3]
res["s2.p",  "mod6_cr0"] <- mod6_cr0$sigma2[4]
res["est",   "mod6_cr0"] <- mod6_cr0$beta
res["se",    "mod6_cr0"] <- mod6_cr0$se
res["zval",  "mod6_cr0"] <- mod6_cr0$zval
res["pval",  "mod6_cr0"] <- mod6_cr0$pval
res["ci.lb", "mod6_cr0"] <- mod6_cr0$ci.lb
res["ci.ub", "mod6_cr0"] <- mod6_cr0$ci.ub
res["AIC",   "mod6_cr0"] <- AIC(mod6_cr0)

res["s2.u",  "mod6_cr1"] <- mod6_cr1$sigma2[2]
res["s2.s",  "mod6_cr1"] <- mod6_cr1$sigma2[1]
res["s2.n",  "mod6_cr1"] <- mod6_cr1$sigma2[3]
res["s2.p",  "mod6_cr1"] <- mod6_cr1$sigma2[4]
res["est",   "mod6_cr1"] <- mod6_cr1$beta
res["se",    "mod6_cr1"] <- mod6_cr1$se
res["zval",  "mod6_cr1"] <- mod6_cr1$zval
res["pval",  "mod6_cr1"] <- mod6_cr1$pval
res["ci.lb", "mod6_cr1"] <- mod6_cr1$ci.lb
res["ci.ub", "mod6_cr1"] <- mod6_cr1$ci.ub
res["AIC",   "mod6_cr1"] <- AIC(mod6_cr1)



#### model 7
res["s2.u",  "mod7"] <- mod7$sigma2[2]
res["s2.s",  "mod7"] <- mod7$sigma2[1]
res["s2.n",  "mod7"] <- mod7$sigma2[3]
res["s2.p",  "mod7"] <- mod7$sigma2[4]
res["est",   "mod7"] <- mod7$beta
res["se",    "mod7"] <- mod7$se
res["zval",  "mod7"] <- mod7$zval
res["pval",  "mod7"] <- mod7$pval
res["ci.lb", "mod7"] <- mod7$ci.lb
res["ci.ub", "mod7"] <- mod7$ci.ub
res["AIC",   "mod7"] <- AIC(mod7)

res["s2.u",  "mod7_cr0"] <- mod7_cr0$sigma2[2]
res["s2.s",  "mod7_cr0"] <- mod7_cr0$sigma2[1]
res["s2.n",  "mod7_cr0"] <- mod7_cr0$sigma2[3]
res["s2.p",  "mod7_cr0"] <- mod7_cr0$sigma2[4]
res["est",   "mod7_cr0"] <- mod7_cr0$beta
res["se",    "mod7_cr0"] <- mod7_cr0$se
res["zval",  "mod7_cr0"] <- mod7_cr0$zval
res["pval",  "mod7_cr0"] <- mod7_cr0$pval
res["ci.lb", "mod7_cr0"] <- mod7_cr0$ci.lb
res["ci.ub", "mod7_cr0"] <- mod7_cr0$ci.ub
res["AIC",   "mod7_cr0"] <- AIC(mod7_cr0)

res["s2.u",  "mod7_cr1"] <- mod7_cr1$sigma2[2]
res["s2.s",  "mod7_cr1"] <- mod7_cr1$sigma2[1]
res["s2.n",  "mod7_cr1"] <- mod7_cr1$sigma2[3]
res["s2.p",  "mod7_cr1"] <- mod7_cr1$sigma2[4]
res["est",   "mod7_cr1"] <- mod7_cr1$beta
res["se",    "mod7_cr1"] <- mod7_cr1$se
res["zval",  "mod7_cr1"] <- mod7_cr1$zval
res["pval",  "mod7_cr1"] <- mod7_cr1$pval
res["ci.lb", "mod7_cr1"] <- mod7_cr1$ci.lb
res["ci.ub", "mod7_cr1"] <- mod7_cr1$ci.ub
res["AIC",   "mod7_cr1"] <- AIC(mod7_cr1)



# results
res <- as.data.frame((round(res, 4)))


sub_res <- res |> 
  select("mod1", "mod2", "mod3", "mod4", "mod5", "mod6", "mod7") 

sub_res <- as.data.frame(t(sub_res))

write.csv(res, "output/case_study_res.csv")
write.csv(sub_res, "output/case_study_subres.csv")

```


